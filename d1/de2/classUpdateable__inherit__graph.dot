digraph "Updateable"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Updateable\n||+ virtual void update\l(float ms)=0\l+ virtual ~Updateable\l()=default\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{App\n|- std::shared_ptr\< Screen\l \> activeScreen\l- Game * game_\l- std::string input\l|+  App()\l+ std::shared_ptr\< Screen\l \> getScreen() const\l+ void changeScreen(std\l::shared_ptr\< Screen\l \> screen)\l+ void registerGame(Game\l *game)\l+ Game * getGame() const\l+ void run()\l+ void draw() override\l+ void update(float ms)\l override\l}",height=0.2,width=0.4,color="black",URL="$dd/d64/classApp.html",tooltip=" "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Checkboard\n|+ static const std::size\l_t sideSize\l- std::shared_ptr\< Squares\l \> squares\l- std::vector\< std::shared\l_ptr\< Square \> \> markedSquares\l- std::shared_ptr\< Pawn\l \> markedPawn\l- std::shared_ptr\< Square\l \> movingSquare_\l- std::shared_ptr\< Rectangle\l \> selectedPawn\l- Rectangle drawingArea\l- std::optional\< long\l \> whiteKingId\l- std::optional\< long\l \> blackKingId\l- std::shared_ptr\< Pawn\l \> whiteKing\l- std::shared_ptr\< Pawn\l \> blackKing\l- std::shared_ptr\< Pawn\l \> whiteKingThreat\l- std::shared_ptr\< Pawn\l \> blackKingThreat\l|+  Checkboard()\l+ std::shared_ptr\< Squares\l \> getSquares() const\l+ std::shared_ptr\< Square\l \> getSquare(const std\l::pair\< int, int \> &coordinates) const\l+ std::pair\< bool, std\l::optional\< PawnColor\l \> \> getSquareInfo(std\l::pair\< int, int \> indexes) const\l+ bool markSquares(const\l Square *square)\l+ void moveKing(const\l Square *square)\l+ void movePawn(Square\l *square)\l+ void resetReferenceCounts()\l+ void setReferenceCounts()\l+ void setBlockedPawns\l() const\l+ void resetBlockedPawns\l() const\l+ void tryMoveBlockedPawn\l(const Square *square)\l+ void secureTheKing\l(const Square *square)\l+ void tryBlockCheck\l(const std::pair\< int,\l int \> &pair, const Square\l *square, const std::shared\l_ptr\< Pawn \> &king)\l+ bool shouldMark(const\l Rectangle *rect)\l+ bool amISelected(const\l Rectangle *rect) const\l+ bool amIinDanger(const\l Rectangle *rect) const\l+ bool isKing(PawnColor\l color, const std::pair\l\< int, int \> &coordinates) const\l+ void draw() override\l+ void update(float ms)\l override\l+ void notify(Square\l *square)\l+ const std::shared_ptr\l\< Square \> & getMovingSquare\l() const\l+ void setMovingSquare\l(Point leftBottom, const\l graphics::Brush &brush,\l Brush type) const\l+ void resetMovingSquare()\l+ static void checkmate\l(PawnColor winner)\l}",height=0.2,width=0.4,color="black",URL="$d7/d22/classCheckboard.html",tooltip=" "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Game\n|- std::optional\< std\l::pair\< Player, Player\l \> \> players\l- std::shared_ptr\< Checkboard\l \> checkboard\l- bool whiteTurn_\l|+  Game()\l+ bool start()\l+ void registerPlayers\l(const std::pair\< Player,\l Player \> &pair)\l+ const Player & getPlayer\l(PawnColor side)\l+ std::shared_ptr\< Checkboard\l \> getCheckboard() const\l+ void draw() override\l+ void update(float ms)\l override\l+ bool isWhiteTurn()\l const\l+ void setWhiteTurn(bool\l white_turn)\l+ void end(PawnColor\l color)\l}",height=0.2,width=0.4,color="black",URL="$d9/d68/classGame.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{HUD\n|- std::string message\l- std::pair\< float, float\l \> coordinates\l- std::size_t size\l- Rectangle drawingArea\l- std::pair\< bool, std\l::optional\< std::string\l \> \> newMessage\l|+  HUD()\l+  HUD(std::string message,\l std::pair\< float, float\l \> coordinates, size_t size)\l+ void draw() override\l+ void update(float ms)\l override\l+ void updateText(std\l::string text)\l+ const std::pair\< float,\l float \> & getCoordinates\l() const\l+ size_t getSize() const\l+ float getLength() const\l+ void setTextBrush(Brush\l type)\l}",height=0.2,width=0.4,color="black",URL="$d0/df0/classHUD.html",tooltip=" "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{PawnCount\n||+  PawnCount(std::pair\l\< float, float \> coordinates,\l size_t size)\l}",height=0.2,width=0.4,color="black",URL="$d5/d4d/classPawnCount.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{Menu\n|- std::unordered_map\l\< ButtonType, MenuOption\l \> options\l|+  Menu()\l+ void draw() override=0\l+ void update(float ms)\l override=0\l+ void addOption(const\l MenuOption &option,\l ButtonType buttonType)\l+ const MenuOption &\l getMenuOption(ButtonType\l buttonType)\l+ const std::unordered\l_map\< ButtonType, MenuOption\l \> & getMenuOptions() const\l+ virtual void pressButton\l(const ButtonType &type)\l const =0\l}",height=0.2,width=0.4,color="black",URL="$d8/ddb/classMenu.html",tooltip=" "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{MainMenu\n||+  MainMenu()\l+ void draw() override\l+ void update(float ms)\l override\l+ void pressButton(const\l ButtonType &type) const\l override\l+ static MenuOption create\lMenuOption(std::string\l message, float verticalPoint)\l}",height=0.2,width=0.4,color="black",URL="$d9/d0a/classMainMenu.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{Pawn\n|- PawnColor color\l- Square * square_\l- Square * movingSquare\l- Rectangle drawingArea\l- std::string texture_\l- const std::string png\l- bool shouldMove\l- std::pair\< float, float\l \> moveSteps\l- Square * destination_\l- std::shared_ptr\< Pawn\l \> self_\l- bool blocked\l- std::shared_ptr\< Pawn\l \> blockingPawn\l|+  Pawn(PawnColor color)\l+ void setSquare(Square\l *square)\l+ Square * getSquare\l() const\l+ PawnColor getColor\l() const\l+ void setTexture(std\l::string texture)\l+ const std::string &\l getTexture() const\l+ std::shared_ptr\< Rectangle\l \> getDrawingArea() const\l+ void draw() override\l+ void update(float ms)\l override\l+ void move(float ms)\l override\l+ void moveTo(Square\l *squarePtr, const std\l::shared_ptr\< Pawn \> &self)\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getAdvanceableSquares()=0\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getHoldingSquares()=0\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getAdvanceableSquares\l(const std::vector\< pair\l \> &steps, unsigned short\l int maxSteps, bool holding) const\l+ std::vector\< std::pair\l\< int, int \> \> correctDirection\l(std::vector\< std::pair\< int,\l int \> \> steps) const\l+ virtual std::shared\l_ptr\< Pawn \> getBlockedPawn()\l+ std::shared_ptr\< Pawn\l \> getBlockingPawn()\l+ bool isBlocked() const\l+ void block()\l+ void unblock()\l+ void blockedBy(const\l std::shared_ptr\< Pawn\l \> &blocking)\l+ static void capture\l(const std::shared_ptr\l\< Pawn \> &pawn)\l}",height=0.2,width=0.4,color="black",URL="$de/dff/classPawn.html",tooltip=" "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{Bishop\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Bishop(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::shared_ptr\< Pawn\l \> getBlockedPawn() override\l}",height=0.2,width=0.4,color="black",URL="$de/dfb/classBishop.html",tooltip=" "];
  Node9 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{King\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  King(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::vector\< std::pair\l\< int, int \> \> getKingSquares\l(std::vector\< std::pair\< int,\l int \> \> &pairs) const\l+ bool isChecked() const\l}",height=0.2,width=0.4,color="black",URL="$d1/db5/classKing.html",tooltip=" "];
  Node9 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{Knight\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Knight(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l}",height=0.2,width=0.4,color="black",URL="$d5/d23/classKnight.html",tooltip=" "];
  Node9 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{Queen\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Queen(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::shared_ptr\< Pawn\l \> getBlockedPawn() override\l}",height=0.2,width=0.4,color="black",URL="$d5/d3f/classQueen.html",tooltip=" "];
  Node9 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{Rook\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Rook(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::shared_ptr\< Pawn\l \> getBlockedPawn() override\l}",height=0.2,width=0.4,color="black",URL="$db/d7e/classRook.html",tooltip=" "];
  Node9 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{Soldier\n||+  Soldier(PawnColor\l color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l}",height=0.2,width=0.4,color="black",URL="$d9/dbe/classSoldier.html",tooltip=" "];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{Rectangle\n|+ static std::unordered\l_map\< Brush, graphics\l::Brush \> colors\l- Point leftTop\l- Point rightTop\l- Point leftBottom_\l- Point rightBottom\l- Point center_\l- float height_\l- float width_\l- graphics::Brush brush_\l- Brush brushType\l- graphics::Brush markBrush\l- Brush markBrushType\l- bool selected\l- bool swapped\l- const long id\l|+  Rectangle()\l+  Rectangle(Point leftBottom,\l float height, float width)\l+  Rectangle(Point leftBottom,\l float height, float width,\l const graphics::Brush &brush,\l const Brush &type)\l+ const graphics::Brush\l & getBrush() const\l+ Brush getBrushType\l() const\l+ void setBrush(Brush\l type, graphics::Brush\l brush)\l+ void setMarkBrush(Brush\l brush)\l+ void swapBrushes()\l+ const Point & getLeftTop\l() const\l+ const Point & getRightTop\l() const\l+ const Point & getLeftBottom\l() const\l+ void setLeftBottom\l(const Point &leftBottom)\l+ const Point & getRightBottom\l() const\l+ const Point & getCenter\l() const\l+ void setCenter(const\l Point &center)\l+ float getHeight() const\l+ float getWidth() const\l+ void setHeight(float\l height)\l+ void setWidth(float\l width)\l+ void draw() override\l+ void update(float ms)\l override\l+ bool clicked() const\l+ long getId() const\l+ static void populateBrushes()\l}",height=0.2,width=0.4,color="black",URL="$de/d00/classRectangle.html",tooltip=" "];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{Screen\n||+  Screen()\l+ void draw() override=0\l+ void update(float ms)\l override=0\l}",height=0.2,width=0.4,color="black",URL="$df/dc5/classScreen.html",tooltip=" "];
  Node17 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{OpeningScreen\n|- std::unique_ptr\< Menu\l \> mainMenu\l- std::unique_ptr\< HUD\l \> welcomeMessage\l|+  OpeningScreen()\l+ void draw() override\l+ void update(float ms)\l override\l}",height=0.2,width=0.4,color="black",URL="$d1/d9f/classOpeningScreen.html",tooltip=" "];
  Node17 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{PlayingScreen\n|- std::shared_ptr\< Squares\l \> capturedWhiteSquares\l- std::shared_ptr\< Squares\l \> capturedBlackSquares\l- std::shared_ptr\< Game\l \> game\l- static constexpr unsigned\l short int numberOfUniquePawns\l|+  PlayingScreen()\l+ void draw() override\l+ void update(float ms)\l override\l+ std::shared_ptr\< Square\l \> getSquare(const std\l::shared_ptr\< Pawn \> &pawn) const\l}",height=0.2,width=0.4,color="black",URL="$d7/df6/classPlayingScreen.html",tooltip=" "];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{Square\n|- unsigned short int row_\l- unsigned short int\l column_\l- std::shared_ptr\< Pawn\l \> pawn_\l- Rectangle drawingArea\l- unsigned short int\l whiteDangerReferenceCount_\l- unsigned short int\l blackDangerReferenceCount_\l|+  Square()\l+  Square(unsigned short\l int row, unsigned short\l int column)\l+ void initialize(Point\l leftBottom, const graphics\l::Brush &brush, Brush type,\l float squareWidth=100.0f)\l+ unsigned short int\l getRow() const\l+ unsigned short int\l getColumn() const\l+ void setRow(unsigned\l short row)\l+ void setColumn(unsigned\l short column)\l+ char getColumnAsChar\l() const\l+ void registerPawn(std\l::shared_ptr\< Pawn \> pawn)\l+ void unregisterPawn()\l+ std::shared_ptr\< Pawn\l \> getPawn() const\l+ bool hasPawn() const\l+ Rectangle getDrawingArea\l() const\l+ void draw() override\l+ void update(float ms)\l override\l+ void increaseDangerReference\lCount(PawnColor color)\l+ void resetDangerReference\lCount()\l+ unsigned short int\l getDangerReferenceCount\l(PawnColor color) const\l}",height=0.2,width=0.4,color="black",URL="$d3/d72/classSquare.html",tooltip=" "];
}
