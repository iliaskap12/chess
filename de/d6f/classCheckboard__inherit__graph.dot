digraph "Checkboard"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Checkboard\n|+ static const std::size\l_t sideSize\l- std::shared_ptr\< Squares\l \> squares\l- std::vector\< std::shared\l_ptr\< Square \> \> markedSquares\l- std::shared_ptr\< Pawn\l \> markedPawn\l- std::shared_ptr\< Square\l \> movingSquare_\l- std::shared_ptr\< Rectangle\l \> selectedPawn\l- Rectangle drawingArea\l- std::optional\< long\l \> whiteKingId\l- std::optional\< long\l \> blackKingId\l- std::shared_ptr\< Pawn\l \> whiteKing\l- std::shared_ptr\< Pawn\l \> blackKing\l- std::shared_ptr\< Pawn\l \> whiteKingThreat\l- std::shared_ptr\< Pawn\l \> blackKingThreat\l|+  Checkboard()\l+ std::shared_ptr\< Squares\l \> getSquares() const\l+ std::shared_ptr\< Square\l \> getSquare(const std\l::pair\< int, int \> &coordinates) const\l+ std::pair\< bool, std\l::optional\< PawnColor\l \> \> getSquareInfo(std\l::pair\< int, int \> indexes) const\l+ bool markSquares(const\l Square *square)\l+ void moveKing(const\l Square *square)\l+ void movePawn(Square\l *square)\l+ void resetReferenceCounts()\l+ void setReferenceCounts()\l+ void setBlockedPawns\l() const\l+ void resetBlockedPawns\l() const\l+ void tryMoveBlockedPawn\l(const Square *square)\l+ void secureTheKing\l(const Square *square)\l+ void tryBlockCheck\l(const std::pair\< int,\l int \> &pair, const Square\l *square, const std::shared\l_ptr\< Pawn \> &king)\l+ bool shouldMark(const\l Rectangle *rect)\l+ bool amISelected(const\l Rectangle *rect) const\l+ bool amIinDanger(const\l Rectangle *rect) const\l+ bool isKing(PawnColor\l color, const std::pair\l\< int, int \> &coordinates) const\l+ void draw() override\l+ void update(float ms)\l override\l+ void notify(Square\l *square)\l+ const std::shared_ptr\l\< Square \> & getMovingSquare\l() const\l+ void setMovingSquare\l(Point leftBottom, const\l graphics::Brush &brush,\l Brush type) const\l+ void resetMovingSquare()\l+ static void checkmate\l(PawnColor winner)\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Drawable\n||+ virtual void draw()=0\l+ virtual ~Drawable()\l=default\l}",height=0.2,width=0.4,color="black",URL="$de/db8/classDrawable.html",tooltip=" "];
  Node3 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Updateable\n||+ virtual void update\l(float ms)=0\l+ virtual ~Updateable\l()=default\l}",height=0.2,width=0.4,color="black",URL="$d2/d7d/classUpdateable.html",tooltip=" "];
}
