digraph "Movable"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Movable\n||+  Movable()=default\l+ virtual void move(float\l ms)=0\l+ virtual ~Movable()\l=default\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Pawn\n|- PawnColor color\l- Square * square_\l- Square * movingSquare\l- Rectangle drawingArea\l- std::string texture_\l- const std::string png\l- bool shouldMove\l- std::pair\< float, float\l \> moveSteps\l- Square * destination_\l- std::shared_ptr\< Pawn\l \> self_\l- bool blocked\l- std::shared_ptr\< Pawn\l \> blockingPawn\l|+  Pawn(PawnColor color)\l+ void setSquare(Square\l *square)\l+ Square * getSquare\l() const\l+ PawnColor getColor\l() const\l+ void setTexture(std\l::string texture)\l+ const std::string &\l getTexture() const\l+ std::shared_ptr\< Rectangle\l \> getDrawingArea() const\l+ void draw() override\l+ void update(float ms)\l override\l+ void move(float ms)\l override\l+ void moveTo(Square\l *squarePtr, const std\l::shared_ptr\< Pawn \> &self)\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getAdvanceableSquares()=0\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getHoldingSquares()=0\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getAdvanceableSquares\l(const std::vector\< pair\l \> &steps, unsigned short\l int maxSteps, bool holding) const\l+ std::vector\< std::pair\l\< int, int \> \> correctDirection\l(std::vector\< std::pair\< int,\l int \> \> steps) const\l+ virtual std::shared\l_ptr\< Pawn \> getBlockedPawn()\l+ std::shared_ptr\< Pawn\l \> getBlockingPawn()\l+ bool isBlocked() const\l+ void block()\l+ void unblock()\l+ void blockedBy(const\l std::shared_ptr\< Pawn\l \> &blocking)\l+ static void capture\l(const std::shared_ptr\l\< Pawn \> &pawn)\l}",height=0.2,width=0.4,color="black",URL="$de/dff/classPawn.html",tooltip=" "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Bishop\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Bishop(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::shared_ptr\< Pawn\l \> getBlockedPawn() override\l}",height=0.2,width=0.4,color="black",URL="$de/dfb/classBishop.html",tooltip=" "];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{King\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  King(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::vector\< std::pair\l\< int, int \> \> getKingSquares\l(std::vector\< std::pair\< int,\l int \> \> &pairs) const\l+ bool isChecked() const\l}",height=0.2,width=0.4,color="black",URL="$d1/db5/classKing.html",tooltip=" "];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{Knight\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Knight(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l}",height=0.2,width=0.4,color="black",URL="$d5/d23/classKnight.html",tooltip=" "];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{Queen\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Queen(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::shared_ptr\< Pawn\l \> getBlockedPawn() override\l}",height=0.2,width=0.4,color="black",URL="$d5/d3f/classQueen.html",tooltip=" "];
  Node2 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{Rook\n|- std::vector\< std::pair\l\< int, int \> \> steps\l- static constexpr unsigned\l short int maxSteps\l|+  Rook(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::shared_ptr\< Pawn\l \> getBlockedPawn() override\l}",height=0.2,width=0.4,color="black",URL="$db/d7e/classRook.html",tooltip=" "];
  Node2 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{Soldier\n||+  Soldier(PawnColor\l color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l}",height=0.2,width=0.4,color="black",URL="$d9/dbe/classSoldier.html",tooltip=" "];
}
