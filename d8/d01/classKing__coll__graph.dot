digraph "King"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{King\n||+  King(PawnColor color)\l+ std::vector\< std::pair\l\< int, int \> \> getAdvanceable\lSquares() override\l+ std::vector\< std::pair\l\< int, int \> \> getHoldingSquares\l() override\l+ std::vector\< std::pair\l\< int, int \> \> getKingSquares\l(std::vector\< std::pair\< int,\l int \> \> &pairs) const\l+ bool isChecked() const\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Pawn\n||+  Pawn(PawnColor color)\l+ void setSquare(Square\l *square)\l+ Square * getSquare\l() const\l+ PawnColor getColor\l() const\l+ void setTexture(std\l::string texture)\l+ const std::string &\l getTexture() const\l+ std::shared_ptr\< Rectangle\l \> getDrawingArea() const\l+ void draw() override\l+ void update(float ms)\l override\l+ void move(float ms)\l override\l+ void moveTo(Square\l *squarePtr, const std\l::shared_ptr\< Pawn \> &self)\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getAdvanceableSquares()=0\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getHoldingSquares()=0\l+ virtual std::vector\l\< std::pair\< int, int\l \> \> getAdvanceableSquares\l(const std::vector\< pair\l \> &steps, unsigned short\l int maxSteps, bool holding) const\l+ std::vector\< std::pair\l\< int, int \> \> correctDirection\l(std::vector\< std::pair\< int,\l int \> \> steps) const\l+ virtual std::shared\l_ptr\< Pawn \> getBlockedPawn()\l+ std::shared_ptr\< Pawn\l \> getBlockingPawn()\l+ bool isBlocked() const\l+ void block()\l+ void unblock()\l+ void blockedBy(const\l std::shared_ptr\< Pawn\l \> &blocking)\l+ static void capture\l(const std::shared_ptr\l\< Pawn \> &pawn)\l}",height=0.2,width=0.4,color="black",URL="$de/dff/classPawn.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Drawable\n||+ virtual void draw()=0\l+ virtual ~Drawable()\l=default\l}",height=0.2,width=0.4,color="black",URL="$de/db8/classDrawable.html",tooltip=" "];
  Node4 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{Updateable\n||+ virtual void update\l(float ms)=0\l+ virtual ~Updateable\l()=default\l}",height=0.2,width=0.4,color="black",URL="$d2/d7d/classUpdateable.html",tooltip=" "];
  Node5 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{Movable\n||+  Movable()=default\l+ virtual void move(float\l ms)=0\l+ virtual ~Movable()\l=default\l}",height=0.2,width=0.4,color="black",URL="$da/dfc/classMovable.html",tooltip=" "];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -color" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{PawnColor\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node7 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -destination_\n-movingSquare\n-square_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{Square\n||+  Square()\l+  Square(unsigned short\l int row, unsigned short\l int column)\l+ void initialize(Point\l leftBottom, const graphics\l::Brush &brush, Brush type,\l float squareWidth=100.0f)\l+ unsigned short int\l getRow() const\l+ unsigned short int\l getColumn() const\l+ void setRow(unsigned\l short row)\l+ void setColumn(unsigned\l short column)\l+ char getColumnAsChar\l() const\l+ void registerPawn(std\l::shared_ptr\< Pawn \> pawn)\l+ void unregisterPawn()\l+ std::shared_ptr\< Pawn\l \> getPawn() const\l+ bool hasPawn() const\l+ Rectangle getDrawingArea\l() const\l+ void draw() override\l+ void update(float ms)\l override\l+ void increaseDangerReference\lCount(PawnColor color)\l+ void resetDangerReference\lCount()\l+ unsigned short int\l getDangerReferenceCount\l(PawnColor color) const\l}",height=0.2,width=0.4,color="black",URL="$d3/d72/classSquare.html",tooltip=" "];
  Node3 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -blackDangerReferenceCount\l_\n-column_\n-row_\n-whiteDangerReference\lCount_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{unsigned short int\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node9 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -pawn_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{std::shared_ptr\< Pawn \>\n||+ Pawn * operator-\>()\l}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node2 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Pawn \>" ,fontname="Helvetica"];
  Node10 [label="{std::shared_ptr\< T \>\n||+ T * operator-\>()\l}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{T\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node12 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -drawingArea" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{Rectangle\n||+  Rectangle()\l+  Rectangle(Point leftBottom,\l float height, float width)\l+  Rectangle(Point leftBottom,\l float height, float width,\l const graphics::Brush &brush,\l const Brush &type)\l+ const graphics::Brush\l & getBrush() const\l+ Brush getBrushType\l() const\l+ void setBrush(Brush\l type, graphics::Brush\l brush)\l+ void setMarkBrush(Brush\l brush)\l+ void swapBrushes()\l+ const Point & getLeftTop\l() const\l+ const Point & getRightTop\l() const\l+ const Point & getLeftBottom\l() const\l+ void setLeftBottom\l(const Point &leftBottom)\l+ const Point & getRightBottom\l() const\l+ const Point & getCenter\l() const\l+ void setCenter(const\l Point &center)\l+ float getHeight() const\l+ float getWidth() const\l+ void setHeight(float\l height)\l+ void setWidth(float\l width)\l+ void draw() override\l+ void update(float ms)\l override\l+ bool clicked() const\l+ long getId() const\l+ static void populateBrushes()\l}",height=0.2,width=0.4,color="black",URL="$de/d00/classRectangle.html",tooltip=" "];
  Node3 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +colors" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{std::unordered_map\l\< Brush, graphics::Brush \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{Brush\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node15 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{Brush\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node16 -> Node13 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Brush, graphics::\lBrush \>" ,fontname="Helvetica"];
  Node16 [label="{std::unordered_map\l\< K, T \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node17 -> Node16 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{K\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node11 -> Node16 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -center_\n-leftBottom_\n-leftTop\n-rightBottom\n-rightTop" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{Point\n||+  Point()\l+  Point(float x, float y)\l+ float getX() const\l+ float getY() const\l+ Point operator+(const\l Point &other) const\l}",height=0.2,width=0.4,color="black",URL="$dc/d4f/classPoint.html",tooltip=" "];
  Node19 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -x\n-y" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{float\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node19 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -height_\n-width_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -brush_\n-markBrush" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -brushType\n-markBrushType" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -selected\n-swapped" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{bool\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node21 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -id" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{const long\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node12 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -drawingArea" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -png\n-texture_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{std::string\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node23 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{std::basic_string\<\l Char \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node20 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -blocked\n-shouldMove" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -moveSteps" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{pair\< float, float \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node9 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -blockingPawn\n-self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -steps" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{std::vector\< std::pair\l\< int, int \> \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{pair\< int, int \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node27 -> Node25 [dir="back",color="orange",fontsize="10",style="solid",label=" \< std::pair\< int, int \> \>" ,fontname="Helvetica"];
  Node27 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
  Node11 -> Node27 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -maxSteps" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{static constexpr unsigned\l short int\n||}",height=0.2,width=0.4,color="black",tooltip=" "];
}
