digraph "Square"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Square\n||+  Square()\l+  Square(unsigned short\l int row, unsigned short\l int column)\l+ void initialize(Point\l leftBottom, const graphics\l::Brush &brush, Brush type,\l float squareWidth=100.0f)\l+ unsigned short int\l getRow() const\l+ unsigned short int\l getColumn() const\l+ void setRow(unsigned\l short row)\l+ void setColumn(unsigned\l short column)\l+ char getColumnAsChar\l() const\l+ void registerPawn(std\l::shared_ptr\< Pawn \> pawn)\l+ void unregisterPawn()\l+ std::shared_ptr\< Pawn\l \> getPawn() const\l+ bool hasPawn() const\l+ Rectangle getDrawingArea\l() const\l+ void draw() override\l+ void update(float ms)\l override\l+ void increaseDangerReference\lCount(PawnColor color)\l+ void resetDangerReference\lCount()\l+ unsigned short int\l getDangerReferenceCount\l(PawnColor color) const\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Drawable\n||+ virtual void draw()=0\l+ virtual ~Drawable()\l=default\l}",height=0.2,width=0.4,color="black",URL="$de/db8/classDrawable.html",tooltip=" "];
  Node3 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Updateable\n||+ virtual void update\l(float ms)=0\l+ virtual ~Updateable\l()=default\l}",height=0.2,width=0.4,color="black",URL="$d2/d7d/classUpdateable.html",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -blackDangerReferenceCount\l_\n-column_\n-row_\n-whiteDangerReference\lCount_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{unsigned short int\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -pawn_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{shared_ptr\<\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -drawingArea" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{Rectangle\n||+  Rectangle()\l+  Rectangle(Point leftBottom,\l float height, float width)\l+  Rectangle(Point leftBottom,\l float height, float width,\l const graphics::Brush &brush,\l const Brush &type)\l+ const graphics::Brush\l & getBrush() const\l+ Brush getBrushType\l() const\l+ void setBrush(Brush\l type, graphics::Brush\l brush)\l+ void setMarkBrush(Brush\l brush)\l+ void swapBrushes()\l+ const Point & getLeftTop\l() const\l+ const Point & getRightTop\l() const\l+ const Point & getLeftBottom\l() const\l+ void setLeftBottom\l(const Point &leftBottom)\l+ const Point & getRightBottom\l() const\l+ const Point & getCenter\l() const\l+ void setCenter(const\l Point &center)\l+ float getHeight() const\l+ float getWidth() const\l+ void setHeight(float\l height)\l+ void setWidth(float\l width)\l+ void draw() override\l+ void update(float ms)\l override\l+ bool clicked() const\l+ long getId() const\l+ static void populateBrushes()\l}",height=0.2,width=0.4,color="black",URL="$de/d00/classRectangle.html",tooltip=" "];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +colors" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{unordered_map\<\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -center_\n-leftBottom_\n-leftTop\n-rightBottom\n-rightTop" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{Point\n||+  Point()\l+  Point(float x, float y)\l+ float getX() const\l+ float getY() const\l+ Point operator+(const\l Point &other) const\l}",height=0.2,width=0.4,color="black",URL="$dc/d4f/classPoint.html",tooltip=" "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -x\n-y" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{float\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -height_\n-width_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -brush_\n-markBrush" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{Brush\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node11 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -brushType\n-markBrushType" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{Brush\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -selected\n-swapped" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{bool\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -id" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{const long\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
